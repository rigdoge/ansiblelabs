---
# 检查系统信息
- name: Get OS information
  debug:
    msg: 
      - "Distribution: {{ ansible_distribution }}"
      - "Version: {{ ansible_distribution_version }}"
      - "Architecture: {{ ansible_architecture }}"

# 安装依赖包
- name: Install dependencies
  apt:
    name:
      - gnupg2
      - curl
      - software-properties-common
      - lsb-release
      - wget
      - apt-transport-https
      - python3-mysqldb
      - python3-pymysql
    state: present
    update_cache: yes

# 下载 Percona 仓库包
- name: Download Percona repository package
  get_url:
    url: "https://repo.percona.com/apt/percona-release_latest.{{ ansible_distribution_release }}_all.deb"
    dest: "/tmp/percona-release.deb"
  register: repo_download

# 安装 Percona 仓库包
- name: Install Percona repository package
  apt:
    deb: "/tmp/percona-release.deb"
    state: present
  when: repo_download is success
  register: repo_install

# 启用 Percona Server 8.0 仓库
- name: Enable Percona Server 8.0 repository
  shell: |
    percona-release disable all
    percona-release enable-only ps-80 release
    apt-get update
  when: repo_install is success
  register: repo_enable

# 启用 Percona Tools 仓库
- name: Enable Percona Tools repository
  shell: |
    percona-release setup tools
    percona-release enable tools release
  when: repo_install is success
  register: tools_enable

# 更新 APT 缓存
- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600
  when: repo_enable is success or tools_enable is success

# 验证 Percona 仓库状态
- name: Check Percona repository status
  command: percona-release show
  register: repo_status

- name: Display repository status
  debug:
    var: repo_status.stdout_lines

# 检查源列表目录
- name: Check sources.list.d directory
  command: ls -la /etc/apt/sources.list.d/
  register: sources_dir

- name: Display sources directory content
  debug:
    var: sources_dir.stdout_lines

# 显示可用的包
- name: List available Percona packages
  shell: apt-cache search percona-server
  register: available_packages

- name: Display available packages
  debug:
    var: available_packages.stdout_lines

# 显示包的详细信息
- name: Get package details
  shell: apt-cache policy percona-server-common-8.0
  register: package_details

- name: Display package details
  debug:
    var: package_details.stdout_lines

# 创建 MySQL 组
- name: Create MySQL group
  group:
    name: mysql
    system: yes
    state: present

# 创建 MySQL 用户
- name: Create MySQL user
  user:
    name: mysql
    system: yes
    group: mysql
    home: /var/lib/mysql
    shell: /bin/false
    state: present

# 创建必要的目录
- name: Create MySQL directories
  file:
    path: "{{ item }}"
    state: directory
    owner: mysql
    group: mysql
    mode: '0755'
  with_items:
    - /etc/mysql
    - /etc/mysql/conf.d
    - /var/lib/mysql
    - /var/log/mysql
    - /var/run/mysqld

# 下载 Percona Server 包
- name: Download Percona Server packages
  get_url:
    url: "{{ item.url }}"
    dest: "/tmp/{{ item.name }}"
  with_items:
    - name: percona-server-common.deb
      url: "https://downloads.percona.com/downloads/Percona-Server-8.0/Percona-Server-8.0.40-31/binary/debian/bookworm/x86_64/percona-server-common_8.0.40-31-1.bookworm_arm64.deb"
    - name: percona-server-client.deb
      url: "https://downloads.percona.com/downloads/Percona-Server-8.0/Percona-Server-8.0.40-31/binary/debian/bookworm/x86_64/percona-server-client_8.0.40-31-1.bookworm_arm64.deb"
    - name: percona-server-server.deb
      url: "https://downloads.percona.com/downloads/Percona-Server-8.0/Percona-Server-8.0.40-31/binary/debian/bookworm/x86_64/percona-server-server_8.0.40-31-1.bookworm_arm64.deb"
    - name: percona-xtrabackup.deb
      url: "https://downloads.percona.com/downloads/Percona-XtraBackup-8.0/Percona-XtraBackup-8.0.35-32/binary/debian/bookworm/x86_64/percona-xtrabackup-80_8.0.35-32-1.bookworm_arm64.deb"
  register: download_debs

# 安装 Percona Server Common
- name: Install Percona Server Common
  apt:
    deb: "/tmp/percona-server-common.deb"
    state: present
    force: yes
  register: common_install

# 安装 Percona Server Client
- name: Install Percona Server Client
  apt:
    deb: "/tmp/percona-server-client.deb"
    state: present
    force: yes
  when: common_install is success
  register: client_install

# 安装 Percona Server
- name: Install Percona Server
  apt:
    deb: "/tmp/percona-server-server.deb"
    state: present
    force: yes
  when: client_install is success
  notify: restart mysql

# 安装 Percona XtraBackup
- name: Install Percona XtraBackup
  apt:
    deb: "/tmp/percona-xtrabackup.deb"
    state: present
    force: yes
  when: client_install is success

# 清理下载的文件
- name: Clean up downloaded files
  file:
    path: "/tmp/{{ item }}"
    state: absent
  with_items:
    - percona-server-common.deb
    - percona-server-client.deb
    - percona-server-server.deb
    - percona-xtrabackup.deb

# 配置 MySQL
- name: Create MySQL configuration file
  template:
    src: my.cnf.j2
    dest: /etc/mysql/my.cnf
    owner: root
    group: root
    mode: '0644'
  notify: restart mysql

# 确保 MySQL 服务运行
- name: Ensure MySQL is running and enabled
  systemd:
    name: mysql
    state: started
    enabled: yes

# 设置 root 密码
- name: Set MySQL root password
  mysql_user:
    name: root
    host: localhost
    password: "{{ mysql_root_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present
  ignore_errors: yes

# 创建监控用户
- name: Create MySQL monitoring user
  mysql_user:
    name: "{{ mysql_exporter_user }}"
    host: localhost
    password: "{{ mysql_exporter_password }}"
    priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
  notify: restart mysql_exporter

# 设置 MySQL Exporter 架构变量
- name: Set MySQL Exporter architecture
  set_fact:
    mysql_exporter_arch: >-
      {%- if ansible_architecture == 'aarch64' -%}arm64
      {%- elif ansible_architecture == 'x86_64' -%}amd64
      {%- else -%}{{ ansible_architecture }}
      {%- endif -%}

# 创建临时目录
- name: Create temporary directory
  tempfile:
    state: directory
    suffix: mysql_exporter
  register: temp_dir

# 下载 MySQL Exporter
- name: Download MySQL Exporter
  get_url:
    url: "https://github.com/prometheus/mysqld_exporter/releases/download/v{{ mysql_exporter_version }}/mysqld_exporter-{{ mysql_exporter_version }}.linux-{{ mysql_exporter_arch }}.tar.gz"
    dest: "{{ temp_dir.path }}/mysqld_exporter.tar.gz"
    mode: '0644'

# 解压 MySQL Exporter
- name: Extract MySQL Exporter
  unarchive:
    src: "{{ temp_dir.path }}/mysqld_exporter.tar.gz"
    dest: "{{ temp_dir.path }}"
    remote_src: yes

# 安装 MySQL Exporter
- name: Install MySQL Exporter
  copy:
    src: "{{ temp_dir.path }}/mysqld_exporter-{{ mysql_exporter_version }}.linux-{{ mysql_exporter_arch }}/mysqld_exporter"
    dest: /usr/local/bin/mysqld_exporter
    mode: '0755'
    remote_src: yes
  notify: restart mysql_exporter

# 清理临时目录
- name: Remove temporary directory
  file:
    path: "{{ temp_dir.path }}"
    state: absent

# 创建 MySQL Exporter 服务
- name: Create MySQL Exporter systemd service
  template:
    src: mysql_exporter.service.j2
    dest: /etc/systemd/system/mysql_exporter.service
    mode: '0644'
  notify: restart mysql_exporter

# 确保 MySQL Exporter 运行
- name: Ensure MySQL Exporter is running and enabled
  systemd:
    name: mysql_exporter
    state: started
    enabled: yes
    daemon_reload: yes

# 创建备份目录
- name: Create backup directories
  file:
    path: "{{ item }}"
    state: directory
    owner: mysql
    group: mysql
    mode: '0750'
  with_items:
    - /var/backup/mysql/full
    - /var/backup/mysql/incremental

# 创建备份脚本
- name: Create backup scripts
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0755'
  with_items:
    - { src: 'mysql-backup-full.sh.j2', dest: '/usr/local/bin/mysql-backup-full' }
    - { src: 'mysql-backup-incremental.sh.j2', dest: '/usr/local/bin/mysql-backup-incremental' }

# 创建定时任务
- name: Setup backup cron jobs
  cron:
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    state: present
  with_items:
    - name: "MySQL full backup"
      job: "/usr/local/bin/mysql-backup-full"
      hour: "1"
      minute: "0"
    - name: "MySQL incremental backup"
      job: "/usr/local/bin/mysql-backup-incremental"
      hour: "*/6"
      minute: "0" 